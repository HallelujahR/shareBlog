{"remainingRequest":"/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js!/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js??ref--13-0!/usr/local/var/www/blog/blog/src/providers/intercept.js","dependencies":[{"path":"/usr/local/var/www/blog/blog/src/providers/intercept.js","mtime":1543567558261},{"path":"/usr/local/var/www/blog/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport axios from \"axios/index\";\nimport qs from 'qs';\nimport router from '../router';\nimport store from '../store';\nimport { SET_VERBSTATE } from \"../store/mutation-types\";\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'http://api.blog.com'; //填写域名\n//http request 拦截器\n\naxios.interceptors.request.use(function (config) {\n  config.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }; //判断提交上来的方法 题爱奥过来的数据需要序列化才能被后端处理\n\n  if (config.method.toLocaleLowerCase() === 'post' || config.method.toLocaleLowerCase() === 'put' || config.method.toLocaleLowerCase() === 'delete') {\n    config.data = qs.stringify(config.data);\n  } //判断token是否存在\n\n\n  if (localStorage.access_token) {\n    //判断token 的格式 因为新的token和旧的token返回的字符串不同\n    if (localStorage.access_token.startsWith('Bearer')) {\n      config.headers.Authorization = localStorage.access_token;\n    } else {\n      config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(err);\n}); //响应拦截器即异常处理\n\naxios.interceptors.response.use(function (response) {\n  var token = response.headers.authorization;\n\n  if (token) {\n    // 如果 header 中存在 token，那么触发 refreshToken 方法，替换本地的 token\n    localStorage.access_token = token;\n  }\n\n  return response;\n}, function (err) {\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        console.log('错误请求');\n        break;\n\n      case 401:\n        //更改本地存储的状态\n        localStorage.verbState = 'false'; //提交到vuex中 当前的状态\n\n        store.commit('SET_VERBSTATE', false);\n        store.commit('SET_TOKEN', ''); //跳转到登录页面\n\n        router.push({\n          name: 'logReg'\n        }); //设置是否重新登录提示\n\n        localStorage.setItem('relogin', 'true');\n        console.log('未授权，请重新登录');\n        break;\n\n      case 403:\n        console.log('拒绝访问');\n        break;\n\n      case 404:\n        console.log('请求错误,未找到该资源');\n        break;\n\n      case 405:\n        console.log('请求方法未允许');\n        break;\n\n      case 408:\n        console.log('请求超时');\n        break;\n\n      case 500:\n        console.log('服务器端出错');\n        break;\n\n      case 501:\n        console.log('网络未实现');\n        break;\n\n      case 502:\n        console.log('网络错误');\n        break;\n\n      case 503:\n        console.log('服务不可用');\n        break;\n\n      case 504:\n        console.log('网络超时');\n        break;\n\n      case 505:\n        console.log('http版本不支持该请求');\n        break;\n\n      default:\n        console.log(\"\".concat(err.response.status));\n    }\n  } else {\n    console.log('连接到服务器失败');\n  }\n\n  return Promise.reject(err.response);\n});",{"version":3,"sources":["/usr/local/var/www/blog/blog/src/providers/intercept.js"],"names":["axios","qs","router","store","SET_VERBSTATE","defaults","timeout","baseURL","interceptors","request","use","config","headers","method","toLocaleLowerCase","data","stringify","localStorage","access_token","startsWith","Authorization","error","Promise","reject","err","response","token","authorization","status","console","log","verbState","commit","push","name","setItem"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,aAAR,QAA4B,yBAA5B;AAEAJ,KAAK,CAACK,QAAN,CAAeC,OAAf,GAAyB,IAAzB;AACAN,KAAK,CAACK,QAAN,CAAeE,OAAf,GAAwB,qBAAxB,C,CAA+C;AAE/C;;AACAP,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAAAC,MAAM,EAAI;AAENA,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACb,oBAAe;AADF,GAAjB,CAFM,CAMN;;AACA,MAAID,MAAM,CAACE,MAAP,CAAcC,iBAAd,OAAsC,MAAtC,IACGH,MAAM,CAACE,MAAP,CAAcC,iBAAd,OAAsC,KADzC,IAEGH,MAAM,CAACE,MAAP,CAAcC,iBAAd,OAAsC,QAF7C,EAEuD;AAEnDH,IAAAA,MAAM,CAACI,IAAP,GAAcd,EAAE,CAACe,SAAH,CAAaL,MAAM,CAACI,IAApB,CAAd;AACH,GAZK,CAcN;;;AACA,MAAIE,YAAY,CAACC,YAAjB,EAA+B;AAC3B;AACA,QAAGD,YAAY,CAACC,YAAb,CAA0BC,UAA1B,CAAqC,QAArC,CAAH,EAAkD;AAC9CR,MAAAA,MAAM,CAACC,OAAP,CAAeQ,aAAf,GAA+BH,YAAY,CAACC,YAA5C;AACH,KAFD,MAEK;AACDP,MAAAA,MAAM,CAACC,OAAP,CAAeQ,aAAf,GAA+B,YAAYH,YAAY,CAACC,YAAxD;AACH;AACJ;;AAED,SAAOP,MAAP;AACH,CA1BL,EA2BI,UAAAU,KAAK,EAAI;AACL,SAAOC,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAP;AAEH,CA9BL,E,CAiCA;;AACAxB,KAAK,CAACQ,YAAN,CAAmBiB,QAAnB,CAA4Bf,GAA5B,CAAgC,UAAAe,QAAQ,EAAI;AAExC,MAAIC,KAAK,GAAGD,QAAQ,CAACb,OAAT,CAAiBe,aAA7B;;AAEA,MAAID,KAAJ,EAAW;AACP;AACAT,IAAAA,YAAY,CAACC,YAAb,GAA4BQ,KAA5B;AAEH;;AAED,SAAOD,QAAP;AAEH,CAZD,EAYG,UAAAD,GAAG,EAAI;AACN,MAAIA,GAAG,IAAIA,GAAG,CAACC,QAAf,EAAyB;AACrB,YAAQD,GAAG,CAACC,QAAJ,CAAaG,MAArB;AACI,WAAK,GAAL;AACIC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;;AACJ,WAAK,GAAL;AACI;AACAb,QAAAA,YAAY,CAACc,SAAb,GAAyB,OAAzB,CAFJ,CAGI;;AACA5B,QAAAA,KAAK,CAAC6B,MAAN,CAAa,eAAb,EAA6B,KAA7B;AACA7B,QAAAA,KAAK,CAAC6B,MAAN,CAAa,WAAb,EAAyB,EAAzB,EALJ,CAMI;;AACA9B,QAAAA,MAAM,CAAC+B,IAAP,CAAY;AAACC,UAAAA,IAAI,EAAE;AAAP,SAAZ,EAPJ,CAQI;;AACAjB,QAAAA,YAAY,CAACkB,OAAb,CAAqB,SAArB,EAA+B,MAA/B;AAEAN,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;;AACJ,WAAK,GAAL;AACID,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA;;AACJ;AACID,QAAAA,OAAO,CAACC,GAAR,WAAeN,GAAG,CAACC,QAAJ,CAAaG,MAA5B;AAhDR;AAkDH,GAnDD,MAmDO;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH;;AACD,SAAOR,OAAO,CAACC,MAAR,CAAeC,GAAG,CAACC,QAAnB,CAAP;AACH,CApED","sourcesContent":["import axios from \"axios/index\";\nimport qs from 'qs';\nimport router from '../router'\nimport store from '../store'\nimport {SET_VERBSTATE} from \"../store/mutation-types\";\n\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL ='http://api.blog.com'; //填写域名\n\n//http request 拦截器\naxios.interceptors.request.use(\n    config => {\n\n        config.headers = {\n            'Content-Type':'application/x-www-form-urlencoded'\n        };\n\n        //判断提交上来的方法 题爱奥过来的数据需要序列化才能被后端处理\n        if (config.method.toLocaleLowerCase() === 'post'\n            || config.method.toLocaleLowerCase() === 'put'\n            || config.method.toLocaleLowerCase() === 'delete') {\n\n            config.data = qs.stringify(config.data)\n        }\n\n        //判断token是否存在\n        if (localStorage.access_token) {\n            //判断token 的格式 因为新的token和旧的token返回的字符串不同\n            if(localStorage.access_token.startsWith('Bearer')){\n                config.headers.Authorization = localStorage.access_token;\n            }else{\n                config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n            }\n        }\n\n        return config;\n    },\n    error => {\n        return Promise.reject(err);\n\n    }\n);\n\n//响应拦截器即异常处理\naxios.interceptors.response.use(response => {\n\n    var token = response.headers.authorization;\n\n    if (token) {\n        // 如果 header 中存在 token，那么触发 refreshToken 方法，替换本地的 token\n        localStorage.access_token = token;\n\n    }\n\n    return response;\n\n}, err => {\n    if (err && err.response) {\n        switch (err.response.status) {\n            case 400:\n                console.log('错误请求')\n                break;\n            case 401:\n                //更改本地存储的状态\n                localStorage.verbState = 'false';\n                //提交到vuex中 当前的状态\n                store.commit('SET_VERBSTATE',false);\n                store.commit('SET_TOKEN','');\n                //跳转到登录页面\n                router.push({name: 'logReg'});\n                //设置是否重新登录提示\n                localStorage.setItem('relogin','true');\n\n                console.log('未授权，请重新登录');\n                break;\n            case 403:\n                console.log('拒绝访问')\n                break;\n            case 404:\n                console.log('请求错误,未找到该资源')\n                break;\n            case 405:\n                console.log('请求方法未允许')\n                break;\n            case 408:\n                console.log('请求超时')\n                break;\n            case 500:\n                console.log('服务器端出错')\n                break;\n            case 501:\n                console.log('网络未实现')\n                break;\n            case 502:\n                console.log('网络错误')\n                break;\n            case 503:\n                console.log('服务不可用')\n                break;\n            case 504:\n                console.log('网络超时')\n                break;\n            case 505:\n                console.log('http版本不支持该请求');\n                break;\n            default:\n                console.log(`${err.response.status}`)\n        }\n    } else {\n        console.log('连接到服务器失败')\n    }\n    return Promise.reject(err.response);\n});\n\n"]}]}