{"remainingRequest":"/usr/local/var/www/blog/blog/node_modules/thread-loader/dist/cjs.js!/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js!/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js??ref--13-0!/usr/local/var/www/blog/blog/src/providers/intercept.js","dependencies":[{"path":"/usr/local/var/www/blog/blog/src/providers/intercept.js","mtime":1543915440601},{"path":"/usr/local/var/www/blog/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport axios from \"axios/index\";\nimport qs from 'qs';\nimport router from '../router';\nimport store from '../store'; // import { SET_VERBSTATE } from \"../store/mutation-types\";\n\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'http://api.blog.com'; //填写域名\n//http request 拦截器\n\naxios.interceptors.request.use(function (config) {\n  config.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }; //判断提交上来的方法 题爱奥过来的数据需要序列化才能被后端处理\n\n  if (config.method.toLocaleLowerCase() === 'post' || config.method.toLocaleLowerCase() === 'put' || config.method.toLocaleLowerCase() === 'delete') {\n    config.data = qs.stringify(config.data);\n  } //判断token是否存在\n\n\n  if (localStorage.access_token) {\n    //判断token 的格式 因为新的token和旧的token返回的字符串不同\n    if (localStorage.access_token.startsWith('Bearer')) {\n      localStorage.access_token = localStorage.access_token.replace(/Bearer /, \"\");\n      config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n    } else {\n      config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n    }\n  }\n\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); //响应拦截器即异常处理\n\naxios.interceptors.response.use(function (response) {\n  var token = response.headers.authorization;\n\n  if (token) {\n    // 如果 header 中存在 token，那么触发 refreshToken 方法，替换本地的 token\n    localStorage.access_token = token;\n  }\n\n  return response;\n}, function (err) {\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        // eslint-disable-next-line no-console\n        console.log('错误请求');\n        break;\n\n      case 401:\n        //更改本地存储的状态\n        localStorage.verbState = 'false'; //提交到vuex中 当前的状态\n\n        store.commit('SET_VERBSTATE', false);\n        store.commit('SET_TOKEN', ''); //跳转到登录页面\n\n        router.push({\n          name: 'logReg'\n        }); //设置是否重新登录提示\n\n        localStorage.setItem('relogin', 'true'); // eslint-disable-next-line no-console\n\n        console.log('未授权，请重新登录');\n        break;\n\n      case 403:\n        // eslint-disable-next-line no-console\n        console.log('拒绝访问');\n        break;\n\n      case 404:\n        // eslint-disable-next-line no-console\n        console.log('请求错误,未找到该资源');\n        break;\n\n      case 405:\n        // eslint-disable-next-line no-console\n        console.log('请求方法未允许');\n        break;\n\n      case 408:\n        // eslint-disable-next-line no-console\n        console.log('请求超时');\n        break;\n\n      case 500:\n        // eslint-disable-next-line no-console\n        console.log('服务器端出错');\n        break;\n\n      case 501:\n        // eslint-disable-next-line no-console\n        console.log('网络未实现');\n        break;\n\n      case 502:\n        // eslint-disable-next-line no-console\n        console.log('网络错误');\n        break;\n\n      case 503:\n        // eslint-disable-next-line no-console\n        console.log('服务不可用');\n        break;\n\n      case 504:\n        // eslint-disable-next-line no-console\n        console.log('网络超时');\n        break;\n\n      case 505:\n        // eslint-disable-next-line no-console\n        console.log('http版本不支持该请求');\n        break;\n\n      default:\n        // eslint-disable-next-line no-console\n        console.log(\"\".concat(err.response.status));\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('连接到服务器失败');\n  }\n\n  return Promise.reject(err.response);\n});",null]}