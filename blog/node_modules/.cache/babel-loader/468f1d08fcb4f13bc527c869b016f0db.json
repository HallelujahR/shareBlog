{"remainingRequest":"/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js!/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js??ref--13-0!/usr/local/var/www/blog/blog/src/providers/intercept.js","dependencies":[{"path":"/usr/local/var/www/blog/blog/src/providers/intercept.js","mtime":1545042784779},{"path":"/usr/local/var/www/blog/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport axios from \"axios/index\";\nimport qs from 'qs';\nimport router from '../router';\nimport store from '../store'; // import { SET_VERBSTATE } from \"../store/mutation-types\";\n\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'http://api.blog.com'; //填写域名\n//http request 拦截器\n\naxios.interceptors.request.use(function (config) {\n  //config.headers = {\n  //'Content-Type': 'application/x-www-form-urlencoded'\n  //}; run\n  //判断提交上来的方法 题爱奥过来的数据需要序列化才能被后端处理\n  if (config.method.toLocaleLowerCase() === 'post' || config.method.toLocaleLowerCase() === 'put' || config.method.toLocaleLowerCase() === 'delete') {} // config.data = qs.stringify(config.data);\n  //判断token是否存在\n\n\n  if (localStorage.access_token) {\n    //判断token 的格式 因为新的token和旧的token返回的字符串不同\n    if (localStorage.access_token.startsWith('Bearer')) {\n      localStorage.access_token = localStorage.access_token.replace(/Bearer /, \"\");\n      config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n    } else {\n      config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n    }\n  }\n\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); //响应拦截器即异常处理\n\naxios.interceptors.response.use(function (response) {\n  var token = response.headers.authorization;\n\n  if (token) {\n    // 如果 header 中存在 token，那么触发 refreshToken 方法，替换本地的 token\n    localStorage.access_token = token;\n  }\n\n  return response;\n}, function (err) {\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        // eslint-disable-next-line no-console\n        console.log('错误请求');\n        break;\n\n      case 401:\n        //更改本地存储的状态\n        localStorage.verbState = 'false'; //提交到vuex中 当前的状态\n\n        store.commit('SET_VERBSTATE', false);\n        store.commit('SET_TOKEN', ''); //跳转到登录页面\n\n        router.push({\n          name: 'login'\n        }); //设置是否重新登录提示\n\n        localStorage.setItem('relogin', 'true'); // eslint-disable-next-line no-console\n\n        console.log('未授权，请重新登录');\n        break;\n\n      case 403:\n        // eslint-disable-next-line no-console\n        console.log('拒绝访问');\n        break;\n\n      case 404:\n        // eslint-disable-next-line no-console\n        console.log('请求错误,未找到该资源');\n        break;\n\n      case 405:\n        // eslint-disable-next-line no-console\n        console.log('请求方法未允许');\n        break;\n\n      case 408:\n        // eslint-disable-next-line no-console\n        console.log('请求超时');\n        break;\n\n      case 500:\n        // eslint-disable-next-line no-console\n        console.log('服务器端出错');\n        break;\n\n      case 501:\n        // eslint-disable-next-line no-console\n        console.log('网络未实现');\n        break;\n\n      case 502:\n        // eslint-disable-next-line no-console\n        console.log('网络错误');\n        break;\n\n      case 503:\n        // eslint-disable-next-line no-console\n        console.log('服务不可用');\n        break;\n\n      case 504:\n        // eslint-disable-next-line no-console\n        console.log('网络超时');\n        break;\n\n      case 505:\n        // eslint-disable-next-line no-console\n        console.log('http版本不支持该请求');\n        break;\n\n      default:\n        // eslint-disable-next-line no-console\n        console.log(\"\".concat(err.response.status));\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('连接到服务器失败');\n  }\n\n  return Promise.reject(err.response);\n});",{"version":3,"sources":["/usr/local/var/www/blog/blog/src/providers/intercept.js"],"names":["axios","qs","router","store","defaults","timeout","baseURL","interceptors","request","use","config","method","toLocaleLowerCase","localStorage","access_token","startsWith","replace","headers","Authorization","err","Promise","reject","response","token","authorization","status","console","log","verbState","commit","push","name","setItem"],"mappings":"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","sourcesContent":["import axios from \"axios/index\";\nimport qs from 'qs';\nimport router from '../router'\nimport store from '../store'\n// import { SET_VERBSTATE } from \"../store/mutation-types\";\n\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'http://api.blog.com'; //填写域名\n\n//http request 拦截器\naxios.interceptors.request.use(\n  config => {\n\n    //config.headers = {\n    //'Content-Type': 'application/x-www-form-urlencoded'\n    //}; run\n\n    //判断提交上来的方法 题爱奥过来的数据需要序列化才能被后端处理\n    if (config.method.toLocaleLowerCase() === 'post'\n      || config.method.toLocaleLowerCase() === 'put'\n      || config.method.toLocaleLowerCase() === 'delete') {\n\n      // config.data = qs.stringify(config.data);\n    }\n\n\n    //判断token是否存在\n    if (localStorage.access_token) {\n      //判断token 的格式 因为新的token和旧的token返回的字符串不同\n      if (localStorage.access_token.startsWith('Bearer')) {\n\n        localStorage.access_token = localStorage.access_token.replace(/Bearer /, \"\");\n\n        config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n      } else {\n        config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n      }\n    }\n\n    return config;\n  },\n  err => {\n    return Promise.reject(err);\n\n  }\n);\n\n//响应拦截器即异常处理\naxios.interceptors.response.use(response => {\n\n  var token = response.headers.authorization;\n\n  if (token) {\n    // 如果 header 中存在 token，那么触发 refreshToken 方法，替换本地的 token\n    localStorage.access_token = token;\n\n  }\n\n  return response;\n\n}, err => {\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        // eslint-disable-next-line no-console\n        console.log('错误请求')\n        break;\n      case 401:\n        //更改本地存储的状态\n        localStorage.verbState = 'false';\n        //提交到vuex中 当前的状态\n        store.commit('SET_VERBSTATE', false);\n        store.commit('SET_TOKEN', '');\n        //跳转到登录页面\n        router.push({ name: 'login' });\n        //设置是否重新登录提示\n        localStorage.setItem('relogin', 'true');\n        // eslint-disable-next-line no-console\n        console.log('未授权，请重新登录');\n        break;\n      case 403:\n        // eslint-disable-next-line no-console\n        console.log('拒绝访问')\n        break;\n      case 404:\n        // eslint-disable-next-line no-console\n        console.log('请求错误,未找到该资源')\n        break;\n      case 405:\n        // eslint-disable-next-line no-console\n        console.log('请求方法未允许')\n        break;\n      case 408:\n        // eslint-disable-next-line no-console\n        console.log('请求超时')\n        break;\n      case 500:\n        // eslint-disable-next-line no-console\n        console.log('服务器端出错')\n        break;\n      case 501:\n        // eslint-disable-next-line no-console\n        console.log('网络未实现')\n        break;\n      case 502:\n        // eslint-disable-next-line no-console\n        console.log('网络错误')\n        break;\n      case 503:\n        // eslint-disable-next-line no-console\n        console.log('服务不可用')\n        break;\n      case 504:\n        // eslint-disable-next-line no-console\n        console.log('网络超时')\n        break;\n      case 505:\n        // eslint-disable-next-line no-console\n        console.log('http版本不支持该请求');\n        break;\n      default:\n        // eslint-disable-next-line no-console\n        console.log(`${err.response.status}`)\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('连接到服务器失败')\n  }\n  return Promise.reject(err.response);\n});\n\n"]}]}