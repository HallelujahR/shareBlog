{"remainingRequest":"/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js!/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js??ref--13-0!/usr/local/var/www/blog/blog/src/providers/http-service.js","dependencies":[{"path":"/usr/local/var/www/blog/blog/src/providers/http-service.js","mtime":1543397752742},{"path":"/usr/local/var/www/blog/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/var/www/blog/blog/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport qs from 'qs';\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'http://api.blog.com'; //填写域名\n//http request 拦截器\n\naxios.interceptors.request.use(function (config) {\n  config.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n\n  if (config.method.toLocaleLowerCase() === 'post' || config.method.toLocaleLowerCase() === 'put' || config.method.toLocaleLowerCase() === 'delete') {\n    config.data = qs.stringify(config.data);\n  }\n\n  if (localStorage.access_token) {\n    config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(err);\n}); //响应拦截器即异常处理\n\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (err) {\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        console.log('错误请求');\n        break;\n\n      case 401:\n        console.log('未授权，请重新登录');\n        break;\n\n      case 403:\n        console.log('拒绝访问');\n        break;\n\n      case 404:\n        console.log('请求错误,未找到该资源');\n        break;\n\n      case 405:\n        console.log('请求方法未允许');\n        break;\n\n      case 408:\n        console.log('请求超时');\n        break;\n\n      case 500:\n        console.log('服务器端出错');\n        break;\n\n      case 501:\n        console.log('网络未实现');\n        break;\n\n      case 502:\n        console.log('网络错误');\n        break;\n\n      case 503:\n        console.log('服务不可用');\n        break;\n\n      case 504:\n        console.log('网络超时');\n        break;\n\n      case 505:\n        console.log('http版本不支持该请求');\n        break;\n\n      default:\n        console.log(\"\".concat(err.response.status));\n    }\n  } else {\n    console.log('连接到服务器失败');\n  }\n\n  return Promise.reject(err.response); // return Promise.resolve()\n});\n/**\n * 封装get方法\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function fetch(url) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (response) {\n      resolve(response.data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * 封装post请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.post(url, data).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * 封装patch请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function patch(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.patch(url, data).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * 封装put请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function put(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.put(url, data).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}\n/**\n * 下面是获取数据的接口\n */\n\n/**\n * 测试接口\n * 名称：exam\n * 参数：paramObj/null\n * 方式：fetch/post/patch/put\n */\n\nexport var server = {\n  login: function login(paramObj) {\n    return post('/authorizations', paramObj);\n  },\n  getCaptchas: function getCaptchas(paramObj) {\n    return post('/captchas', paramObj);\n  },\n  checkYzm: function checkYzm() {\n    return post('/verificationCodes');\n  },\n  regNow: function regNow() {\n    return post('/users');\n  },\n  getUser: function getUser() {\n    return fetch('/user');\n  }\n};",{"version":3,"sources":["/usr/local/var/www/blog/blog/src/providers/http-service.js"],"names":["axios","qs","defaults","timeout","baseURL","interceptors","request","use","config","headers","method","toLocaleLowerCase","data","stringify","localStorage","access_token","Authorization","error","Promise","reject","err","response","status","console","log","fetch","url","params","resolve","get","then","catch","post","patch","put","server","login","paramObj","getCaptchas","checkYzm","regNow","getUser"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL ='http://api.blog.com'; //填写域名\n\n//http request 拦截器\naxios.interceptors.request.use(\n    config => {\n\n        config.headers = {\n            'Content-Type':'application/x-www-form-urlencoded'\n        };\n\n        if (config.method.toLocaleLowerCase() === 'post'\n            || config.method.toLocaleLowerCase() === 'put'\n            || config.method.toLocaleLowerCase() === 'delete') {\n\n            config.data = qs.stringify(config.data)\n        }\n\n        if (localStorage.access_token) {\n            config.headers.Authorization = 'Bearer ' + localStorage.access_token;\n        }\n\n        return config;\n    },\n    error => {\n        return Promise.reject(err);\n    }\n);\n\n//响应拦截器即异常处理\naxios.interceptors.response.use(response => {\n    return response\n}, err => {\n    if (err && err.response) {\n        switch (err.response.status) {\n            case 400:\n                console.log('错误请求')\n                break;\n            case 401:\n                console.log('未授权，请重新登录')\n                break;\n            case 403:\n                console.log('拒绝访问')\n                break;\n            case 404:\n                console.log('请求错误,未找到该资源')\n                break;\n            case 405:\n                console.log('请求方法未允许')\n                break;\n            case 408:\n                console.log('请求超时')\n                break;\n            case 500:\n                console.log('服务器端出错')\n                break;\n            case 501:\n                console.log('网络未实现')\n                break;\n            case 502:\n                console.log('网络错误')\n                break;\n            case 503:\n                console.log('服务不可用')\n                break;\n            case 504:\n                console.log('网络超时')\n                break;\n            case 505:\n                console.log('http版本不支持该请求');\n                break;\n            default:\n                console.log(`${err.response.status}`)\n        }\n    } else {\n        console.log('连接到服务器失败')\n    }\n    return Promise.reject(err.response);\n    // return Promise.resolve()\n});\n\n/**\n * 封装get方法\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function fetch(url,params={}){\n    return new Promise((resolve,reject) => {\n        axios.get(url,{\n            params:params\n        })\n            .then(response => {\n                resolve(response.data);\n            })\n            .catch(err => {\n                reject(err)\n\n            })\n    })\n}\n\n\n/**\n * 封装post请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function post(url,data = {}){\n\n\n    return new Promise((resolve,reject) => {\n\n        axios.post(url,data)\n            .then(response => {\n                resolve(response.data);\n            },err => {\n                reject(err)\n            })\n    })\n}\n\n/**\n * 封装patch请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function patch(url,data = {}){\n    return new Promise((resolve,reject) => {\n        axios.patch(url,data)\n            .then(response => {\n                resolve(response.data);\n            },err => {\n                reject(err)\n            })\n    })\n}\n\n/**\n * 封装put请求\n * @param url\n * @param data\n * @returns {Promise}\n */\n\nexport function put(url,data = {}){\n    return new Promise((resolve,reject) => {\n        axios.put(url,data)\n            .then(response => {\n                resolve(response.data);\n            },err => {\n                reject(err)\n            })\n    })\n}\n\n/**\n * 下面是获取数据的接口\n */\n/**\n * 测试接口\n * 名称：exam\n * 参数：paramObj/null\n * 方式：fetch/post/patch/put\n */\nexport const server = {\n    login: function(paramObj) {\n        return post('/authorizations',paramObj);\n    },\n    getCaptchas: function(paramObj){\n        return post('/captchas',paramObj);\n    },\n    checkYzm: function() {\n        return post('/verificationCodes');\n    },\n    regNow: function() {\n        return post('/users');\n    },\n    getUser: function () {\n        return fetch('/user');\n    },\n\n};\n\n"]}]}